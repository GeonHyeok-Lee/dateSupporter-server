type Chat {
  id: Int!
  messages: [Message]
  acceptedUser: User!
  acceptedId: Int!
  proposedUser: User!
  proposedId: Int!
  createdAt: String!
  updatedAt: String!
}

type GetCoupleResponse {
  ok: Boolean!
  error: String
  couple: Couple
}

type Query {
  GetCouple(coupleId: Int!): GetCoupleResponse!
}

type RequestCoupleResponse {
  ok: Boolean!
  error: String
}

type Mutation {
  RequestCouple: RequestCoupleResponse!
  CompletePhoneVerification(phoneNumber: String!, key: String!): CompletePhoneVerificationResponse!
  FacebookConnect(firstName: String, lastName: String, email: String!, fbId: String!): FacebookConnectResponse!
  GoogleConnect(firstName: String, lastName: String, email: String!, googleId: String!): GoogleConnectResponse!
  KakaoConnect(firstName: String, lastName: String, name: String, email: String!, kakaoId: String!): KakaoConnectResponse!
  NaverConnect(firstName: String, lastName: String, name: String, email: String!, naverId: String!): NaverConnectResponse!
  StartPhoneVerification(phoneNumber: String!): StartPhoneVerificationResponse!
}

type Couple {
  id: Int!
  chat: Chat
  proposedUser: User
  proposedUserId: Int!
  acceptedUser: User
  acceptedUserId: Int!
  createdAt: String!
  updatedAt: String!
}

type Message {
  id: Int!
  text: String!
  chat: Chat!
  chatId: Int!
  createdAt: String!
  updatedAt: String!
}

type CompletePhoneVerificationResponse {
  ok: Boolean!
  error: String
}

type FacebookConnectResponse {
  ok: Boolean!
  error: String
  token: String
}

type GoogleConnectResponse {
  ok: Boolean!
  error: String
  token: String
}

type KakaoConnectResponse {
  ok: Boolean!
  error: String
  token: String
}

type NaverConnectResponse {
  ok: Boolean!
  error: String
  token: String
}

type User {
  id: Int!
  fbId: String!
  googleId: String!
  kakaoId: String!
  naverId: String!
  email: String!
  name: String!
  firstName: String!
  lastName: String!
  fullName: String!
  phoneNumber: String!
  isProposed: Boolean!
  isAccepted: Boolean!
  verifiedPhoneNumber: Boolean!
}

type StartPhoneVerificationResponse {
  ok: Boolean!
  error: String
}

type Verification {
  id: Int!
  target: String!
  payload: String!
  key: String!
  verified: Boolean!
  createdAt: String!
  updatedAt: String!
  verificationUser: User
  verificationUserId: Int!
}
