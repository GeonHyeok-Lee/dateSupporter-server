type Subscription {
  MessageSubscription: Message
  CoupleStatusSubscription: Couple
  RequestCoupleSubscription: Couple
  AddPlaceSubscription: Place
  EditPlaceSubscription: Place
  DeletePlaceSubscription: Place
}

type SendMessageResponse {
  ok: Boolean!
  error: String
  message: Message
}

type Mutation {
  SendMessage(text: String!, chatId: Int!): SendMessageResponse!
  RequestCouple(phoneNumber: String!): RequestCoupleResponse!
  UpdateCoupleStatus(coupleId: Int!, status: StatusOptions!): UpdateCoupleStatusResponse!
  AddPlace(coupleId: Int!, name: String!, contents: String!, lat: Float!, lng: Float!, address: String!): AddPlaceResponse!
  DeletePlace(coupleId: Int!, placeId: Int!): DeletePlaceResponse!
  EditPlace(coupleId: Int!, placeId: Int!, name: String!, contents: String!): EditPlaceResponse!
  ResetUser: ResetUserResponse!
  CompleteEmailVerification(key: String!): CompleteEmailVerificationResponse!
  CompletePhoneVerification(phoneNumber: String!, key: String!): CompletePhoneVerificationResponse!
  EditUser(userId: Int!, nickName: String!, profileImage: String!): EditUserResponse!
  EmailSignIn(email: String!, password: String!): EmailSignInResponse!
  EmailSignUp(email: String!, password: String!, name: String!): EmailSignUpResponse!
  FacebookConnect(firstName: String!, lastName: String!, email: String!, fbId: String!): FacebookConnectResponse!
  GoogleConnect(firstName: String!, lastName: String!, email: String!, googleId: String!): GoogleConnectResponse!
  KakaoConnect(name: String!, email: String!, kakaoId: String!): KakaoConnectResponse!
  NaverConnect(name: String!, firstName: String!, lastName: String!, email: String!, naverId: String!): NaverConnectResponse!
  StartPhoneVerification(phoneNumber: String!): StartPhoneVerificationResponse!
}

type Chat {
  id: Int!
  messages: [Message]
  couple: Couple!
  coupleId: Int!
  acceptUserId: Int!
  requestUserId: Int!
  createdAt: String!
  updatedAt: String!
}

type Message {
  id: Int!
  text: String!
  chat: Chat!
  chatId: Int!
  userName: String!
  createdAt: String!
  updatedAt: String!
}

type GetCoupleResponse {
  ok: Boolean!
  error: String
  couple: Couple
}

type Query {
  GetCouple(coupleId: Int!): GetCoupleResponse
  GetRequestCouple: GetRequestCoupleResponse
  GetPlace(placeId: Int!): GetPlaceResponse
  GetUser: GetUserResponse!
}

type GetRequestCoupleResponse {
  ok: Boolean!
  error: String
  couple: Couple
}

type RequestCoupleResponse {
  ok: Boolean!
  error: String
  couple: Couple
}

type Couple {
  id: Int!
  status: String!
  chat: Chat
  requestUser: User
  requestUserId: Int!
  acceptUser: User
  acceptUserId: Int!
  requestPhoneNumber: String!
  acceptPhoneNumber: String!
  createdAt: String!
  updatedAt: String!
}

type UpdateCoupleStatusResponse {
  ok: Boolean!
  error: String
  couple: Couple
}

enum StatusOptions {
  ACCEPTED
  CANCELED
  FINISHED
  REQUESTING
}

type EmailVerification {
  id: Int!
  target: String!
  email: String!
  key: String!
  verified: Boolean!
  createdAt: String!
  updatedAt: String
}

type PhoneVerification {
  id: Int!
  target: String!
  phoneNumber: String!
  key: String!
  verified: Boolean!
  createdAt: String!
  updatedAt: String!
  phoneVerificationUser: User
  phoneVerificationUserId: Int!
}

type AddPlaceResponse {
  ok: Boolean!
  error: String
}

type DeletePlaceResponse {
  ok: Boolean!
  error: String
}

type EditPlaceResponse {
  ok: Boolean!
  error: String
}

type GetPlaceResponse {
  ok: Boolean!
  error: String
  place: Place
}

type Place {
  id: Int!
  name: String!
  contents: String!
  lat: Float!
  lng: Float!
  address: String!
  couple: Couple!
  coupleId: Int!
  addUserId: Int!
  createdAt: String!
  updatedAt: String!
}

type ResetUserResponse {
  ok: Boolean!
  error: String
}

type CompleteEmailVerificationResponse {
  ok: Boolean!
  error: String
}

type CompletePhoneVerificationResponse {
  ok: Boolean!
  error: String
}

type EditUserResponse {
  ok: Boolean!
  error: String
}

type EmailSignInResponse {
  ok: Boolean!
  error: String
  token: String
}

type EmailSignUpResponse {
  ok: Boolean!
  error: String
  token: String
}

type FacebookConnectResponse {
  ok: Boolean!
  error: String
  token: String
}

type GetUserResponse {
  ok: Boolean!
  error: String
  user: User
}

type GoogleConnectResponse {
  ok: Boolean!
  error: String
  token: String
}

type KakaoConnectResponse {
  ok: Boolean!
  error: String
  token: String
}

type NaverConnectResponse {
  ok: Boolean!
  error: String
  token: String
}

type User {
  id: Int!
  fbId: String!
  googleId: String!
  kakaoId: String!
  naverId: String!
  email: String!
  password: String!
  signUpEmail: String!
  verifiedEmail: Boolean!
  name: String!
  firstName: String!
  lastName: String!
  fullName: String!
  nickName: String!
  profileImage: String!
  phoneNumber: String!
  isRequested: Boolean!
  isAccepted: Boolean!
  isCouple: Boolean!
  verifiedPhone: Boolean!
}

type StartPhoneVerificationResponse {
  ok: Boolean!
  error: String
}
